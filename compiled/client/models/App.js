// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.set('inPlay', true);
      this.get('playerHand').on('hit', (function() {
        return console.log("app hears hit");
      }), this);
      this.get('playerHand').on('playerbust', (function() {
        console.log("app hears bust");
        this.set('inPlay', false);
        return this.get('dealerHand').at(0).flip();
      }), this);
      return this.get('playerHand').on('playerstand', (function() {
        console.log("app hears stand");
        if (this.get('inPlay')) {
          this.set('inPlay', false);
          this.get('dealerHand').hit();
          this.get('dealerHand').at(0).flip();
          return this.determineWinner();
        } else {
          return console.log("tried to stand after busting!");
        }
      }), this);
    };

    App.prototype.determineWinner = function() {
      var dealerscore, playerscore;
      playerscore = this.get('playerHand').score();
      dealerscore = this.get('dealerHand').score();
      if (playerscore > dealerscore) {
        return console.log("player wins");
      } else {
        return console.log("dealer wins");
      }
    };

    App.prototype.redeal = function() {
      var newhand;
      console.log("app heard redeal");
      newhand = (this.get('deck')).dealPlayer().models;
      (this.get('playerHand')).reset(newhand);
      newhand = (this.get('deck')).dealDealer().models;
      (this.get('dealerHand')).reset(newhand);
      return this.set('inPlay', true);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
